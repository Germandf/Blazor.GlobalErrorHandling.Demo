@page "/"

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<p>This simple app demonstrates different ways of handling exceptions using a CustomErrorBoundary component, inheriting from ErrorBoundary.</p>

<h1>Counter</h1>

<p>If Current count is greater than @maxCount, it will throw an exception handled by the global ErrorBoundary.</p>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service. May throw an exception handled by its own ErrorBoundary with a custom ErrorContent.</p>

<CustomErrorBoundary @ref="errorBoundary">
    <ChildContent>
        <WeatherForecasts />
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger">
            <h3>@context.GetType()</h3>
            <h4>@context.Message</h4>
            <button class="btn btn-danger" @onclick="() => errorBoundary?.Recover()">Reload</button>
        </div>
    </ErrorContent>
</CustomErrorBoundary>

<h1>Kill Circuit</h1>

<p>This component provoques an unhandled exception inside ErrorBoundary component.</p>

<button class="btn btn-secondary" @onclick="KillCircuit">Kill</button>

@code {

    private int currentCount = 0;
    private int maxCount = 3;
    private CustomErrorBoundary? errorBoundary;

    private void IncrementCount()
    {
        currentCount++;

        if (currentCount > maxCount)
        {
            throw new InvalidOperationException($"Current count is over {maxCount}!");
        }
    }

    private void KillCircuit()
    {
        throw new Exception("Kill!");
    }

}
